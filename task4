1. Build the HTML Structure
This index.html file creates the user interface for the to-do list, including an input field, an "Add" button, and a container for the list items.

HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List App</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

    <div class="todo-app-container">
        <h2>To-Do List üìù</h2>
        <div class="input-section">
            <input type="text" id="todo-input" placeholder="Add a new task...">
            <button id="add-btn">Add</button>
        </div>
        <ul id="todo-list">
            </ul>
    </div>

    <script src="script.js"></script>
</body>
</html>
2. Add the CSS Styling
The style.css file provides the visual design for the to-do app, including a responsive layout.

CSS

body {
    font-family: Arial, sans-serif;
    background: linear-gradient(to right, #6a11cb, #2575fc);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    color: #333;
}

.todo-app-container {
    background-color: white;
    padding: 2.5rem;
    border-radius: 15px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    width: 100%;
    max-width: 450px;
    text-align: center;
}

h2 {
    color: #333;
    margin-bottom: 1.5rem;
    font-size: 2rem;
}

.input-section {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1.5rem;
}

#todo-input {
    flex-grow: 1;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 25px;
    margin-right: 0.5rem;
    font-size: 1rem;
}

#add-btn {
    padding: 0.75rem 1.5rem;
    background-color: #2575fc;
    color: white;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
}

#add-btn:hover {
    background-color: #1a5acb;
}

#todo-list {
    list-style: none;
    padding: 0;
    text-align: left;
}

#todo-list li {
    background-color: #f9f9f9;
    padding: 1rem;
    margin-bottom: 0.75rem;
    border-radius: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background-color 0.3s ease;
}

#todo-list li:hover {
    background-color: #f1f1f1;
}

#todo-list li.completed {
    text-decoration: line-through;
    color: #888;
}

#todo-list li button {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    color: #dc3545;
}
3. Implement Data Persistence with Local Storage
The script.js file handles the core logic of the app: adding, deleting, and marking tasks as complete, as well as saving and loading data from the browser's localStorage.

JavaScript

const todoInput = document.getElementById('todo-input');
const addBtn = document.getElementById('add-btn');
const todoList = document.getElementById('todo-list');

// Function to save tasks to local storage
function saveTasks() {
    localStorage.setItem('tasks', todoList.innerHTML);
}

// Function to load tasks from local storage
function loadTasks() {
    const tasks = localStorage.getItem('tasks');
    if (tasks) {
        todoList.innerHTML = tasks;
    }
}

// Function to create a new list item
function createListItem(taskText) {
    const li = document.createElement('li');
    li.innerHTML = `
        <span>${taskText}</span>
        <button class="delete-btn">‚ùå</button>
    `;

    // Add event listeners for the new item
    li.addEventListener('click', () => {
        li.classList.toggle('completed');
        saveTasks();
    });

    li.querySelector('.delete-btn').addEventListener('click', (e) => {
        // Stop event bubbling to the parent li
        e.stopPropagation(); 
        li.remove();
        saveTasks();
    });

    return li;
}

// Event listener for the "Add" button
addBtn.addEventListener('click', () => {
    const taskText = todoInput.value.trim();
    if (taskText !== '') {
        const newTodoItem = createListItem(taskText);
        todoList.appendChild(newTodoItem);
        todoInput.value = ''; // Clear the input field
        saveTasks();
    }
});

// Load tasks when the page first loads
loadTasks();
