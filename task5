1. Build a Full Web Application (Capstone Project)
This example will create a simple product listing page that fetches product data from a mock API and renders it dynamically. The page will include HTML, CSS, and JavaScript.

HTML Structure (index.html)
This file sets up the basic layout, including a main container for products and a loading indicator.

HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Products Page</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

    <header>
        <h1>Our Products</h1>
    </header>

    <main id="product-container">
        <p class="loading-message">Loading products...</p>
        </main>

    <footer>
        <p>&copy; 2025 E-Commerce App</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>
2. Optimize for Performance and Ensure Responsiveness
The style.css file provides the styling and ensures the layout is responsive for different screen sizes. It uses Flexbox to organize the product cards.

CSS Styling (style.css)
CSS

body {
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
    margin: 0;
    padding: 0;
}

header {
    background-color: #333;
    color: white;
    padding: 1.5rem 0;
    text-align: center;
}

#product-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px;
    padding: 20px;
    max-width: 1200px;
    margin: auto;
}

.product-card {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 300px;
    padding: 15px;
    text-align: center;
    transition: transform 0.2s ease-in-out;
}

.product-card:hover {
    transform: translateY(-5px);
}

.product-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 10px;
}

.product-title {
    font-size: 1.25rem;
    color: #333;
    margin: 10px 0;
}

.product-price {
    font-size: 1.5rem;
    color: #28a745;
    font-weight: bold;
    margin-bottom: 10px;
}

.buy-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    width: 100%;
}

.buy-button:hover {
    background-color: #0056b3;
}

footer {
    text-align: center;
    padding: 1rem 0;
    background-color: #333;
    color: white;
    margin-top: 2rem;
}

/* Responsive Design */
@media (max-width: 768px) {
    #product-container {
        flex-direction: column;
        align-items: center;
    }
    .product-card {
        width: 90%;
    }
}
3. Implement JavaScript and Fetch Data
The script.js file handles fetching data from an external API and dynamically creating HTML elements for each product. This demonstrates a full-stack approach where the front end is populated with data from a back-end source.

JavaScript Logic (script.js)
JavaScript

// Mock API data for demonstration purposes
const mockProducts = [
    { id: 1, name: "Wireless Headphones", price: 59.99, image: "https://via.placeholder.com/300x200?text=Headphones" },
    { id: 2, name: "Smart Watch", price: 129.99, image: "https://via.placeholder.com/300x200?text=Smartwatch" },
    { id: 3, name: "Portable Speaker", price: 35.50, image: "https://via.placeholder.com/300x200?text=Speaker" },
    { id: 4, name: "Gaming Mouse", price: 45.00, image: "https://via.placeholder.com/300x200?text=Mouse" },
    { id: 5, name: "Mechanical Keyboard", price: 89.99, image: "https://via.placeholder.com/300x200?text=Keyboard" }
];

const productContainer = document.getElementById('product-container');

// Simulating a network request to fetch products
async function fetchProducts() {
    try {
        // Use a real API for production (e.g., FakeStoreAPI)
        // const response = await fetch('https://fakestoreapi.com/products');
        // const products = await response.json();

        // Simulate a delay for the mock data
        await new Promise(resolve => setTimeout(resolve, 1000));
        const products = mockProducts;

        // Clear the loading message
        productContainer.innerHTML = '';

        // Render each product
        products.forEach(product => {
            const productCard = document.createElement('div');
            productCard.className = 'product-card';
            productCard.innerHTML = `
                <img src="${product.image}" alt="${product.name}" class="product-image">
                <h3 class="product-title">${product.name}</h3>
                <p class="product-price">$${product.price.toFixed(2)}</p>
                <button class="buy-button">Add to Cart</button>
            `;
            productContainer.appendChild(productCard);
        });

    } catch (error) {
        productContainer.innerHTML = '<p class="error-message">Failed to load products. Please try again.</p>';
        console.error('Error fetching products:', error);
    }
}

// Ensure the application works on all major browsers and devices
// To do this, you would use tools like BrowserStack or Chrome DevTools to test compatibility.
// For this example, the simple HTML/CSS/JS is inherently cross-compatible.

// Initial call to fetch and display products
fetchProducts();











Tools

